<h1 id='data-api'>Data API</h1>
<blockquote>
<p>https://{NAMARA_API_HOST}/v0/data_sets/{DATA_SET_ID}/data</p>
</blockquote>

<p>Each data set can be accessed at the API URL. In Namara, click on the &quot;API Info&quot; tab when viewing a data set to see all information regarding data set ID, version, and properties.</p>
<h2 id='get-data-query'><div class="colour-pill"><span class="get">GET</span> Data Query</div></h2>
<blockquote>
<p>https://api.namara.io/v0/data_sets/{DATA_SET_ID}/data</p>
</blockquote>

<p>This endpoint is used for creating selection and aggregation views on a single data set. For full SQL access to the Namara catalog, see the <a href="#query-api">Query API</a>.</p>

<table><thead>
<tr>
<th>Path Parameters</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>data_set_id (required)</td>
<td><code>string</code></td>
<td>UUID for accessing the data set</td>
</tr>
</tbody></table>

<table><thead>
<tr>
<th>Query Parameters</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>result_format</td>
<td><code>string</code></td>
<td>Query response format: <code>csv</code>, <code>json</code>, or <code>geojson</code> (default is <code>json</code>)</td>
</tr>
<tr>
<td>geometry_format</td>
<td><code>string</code></td>
<td>Either <code>wkt</code> or <code>geojson</code> for all geometry values (default is <code>geojson</code>)</td>
</tr>
<tr>
<td>geojson_feature_key</td>
<td><code>string</code></td>
<td>Property name to use as geometry when rendering <code>geojson</code></td>
</tr>
<tr>
<td>limit</td>
<td><code>integer</code></td>
<td>Number of rows to return - the default value is also the maximum: 250 (see <a href="#pagination">Pagination</a>)</td>
</tr>
<tr>
<td>offset</td>
<td><code>integer</code></td>
<td>Results will be returned starting at the row number specified (see <a href="#pagination">Pagination</a>)</td>
</tr>
<tr>
<td>select</td>
<td><code>string</code></td>
<td>Comma-separated list of column names to return</td>
</tr>
<tr>
<td>order</td>
<td><code>string</code></td>
<td>Specify the order of the returned results (see <a href="#ordering">Ordering</a>)</td>
</tr>
<tr>
<td>where</td>
<td><code>string</code></td>
<td>Conditions for performing query (see <a href="#conditions">Conditions</a>)</td>
</tr>
</tbody></table>
<h2 id='formats-pagination-amp-ordering'>Formats, Pagination, &amp; Ordering</h2><h3 id='results-format'>Results Format</h3>
<p>The Namara Data API produces results in different formats, <code>json</code>, <code>csv</code>, or <code>geojson</code>, depending on the value you pass into the <code>result_format</code> parameter in your query. In examples of results, you&#39;ll see three buttons above the code block which will show example results in your preferred format. Here&#39;s how they look:</p>

<p><button class="see-json">json</button> 
<button class="see-csv">csv</button> 
<button class="see-geojson">geojson</button> </p>

<div class="center-column response-json"></div>
<pre class="highlight plaintext"><code>  {
    "results":[
      {
        "c0":"format",
        "c1":"example"
      },
      ...
    ]
  }
</code></pre>
<div class="center-column response-csv"></div>
<pre class="highlight plaintext"><code>  c0,c1
  format,example
</code></pre>
<div class="center-column response-geojson"></div>
<pre class="highlight plaintext"><code>  {
    "type":"GeojsonResponseFormat",
    "features":[
      {
        "type":"Feature",
        "geometry":{
          "type":"Point",
          "coordinates": [ -79.4, 43.7 ]
        },
        "properties":{
          "c0":"format",
          "c1":"example"
        }
      },
      ...
    ]
  }
</code></pre><h3 id='pagination'>Pagination</h3>
<p>Each query response is limited to 250 results. To view the entire response, either use the <code>export</code> endpoint to render the results of the query, or use <code>limit</code> and <code>offset</code> arguments to paginate over results, until no more values are found. </p>
<h3 id='ordering'>Ordering</h3>
<blockquote>
<p>...&amp;order=p0 ASC</p>
</blockquote>

<p>Pass in either <code>ASC</code> or <code>DESC</code> after specifying a column to see results in ascending or descending order, respectively.</p>
<h2 id='conditions'>Conditions</h2>
<p>The <code>where</code> argument supports a number of comparison operators and geospatial functions:</p>

<table><thead>
<tr>
<th>Symbol</th>
<th>Alias</th>
<th>Description</th>
<th>Use</th>
</tr>
</thead><tbody>
<tr>
<td>=</td>
<td>eq</td>
<td>Returns an exact, case-sensitive match of the value</td>
<td><code>p0=100</code> <code>p3 eq &#39;2015-01-06&#39;</code></td>
</tr>
<tr>
<td>!=</td>
<td>neq</td>
<td>Returns an exact, case-sensitive match of the value</td>
<td><code>p0!=50</code> <code>p3 neq &#39;2016-07-16&#39;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td>gt</td>
<td>Works for numerical, date and datetime values</td>
<td><code>p0&gt;100</code> <code>p0 gt &#39;2010-01-01&#39;</code></td>
</tr>
<tr>
<td>&gt;=</td>
<td>gte</td>
<td>Works for numerical, date and datetime values</td>
<td><code>p0&gt;=75</code> <code>p0 gte &#39;2010-01-01&#39;</code></td>
</tr>
<tr>
<td>&lt;</td>
<td>lt</td>
<td>Works for numerical, date and datetime values</td>
<td><code>p0&lt;200</code> <code>p0 lt &#39;2018-04-01&#39;</code></td>
</tr>
<tr>
<td>&lt;=</td>
<td>lte</td>
<td>Works for numerical, date and datetime values</td>
<td><code>p0&lt;=150</code> <code>p0 lte &#39;2017-11-01&#39;</code></td>
</tr>
<tr>
<td>IS</td>
<td></td>
<td>Only works for boolean values</td>
<td><code>p1 IS true</code> <code>p1 IS NULL</code></td>
</tr>
<tr>
<td>IS NOT</td>
<td></td>
<td>Only works for boolean values</td>
<td><code>p1 IS NOT true</code> <code>p1 IS NOT NULL</code></td>
</tr>
<tr>
<td>LIKE</td>
<td></td>
<td><code>%</code> = wildcard, case-insensitive</td>
<td><code>p2 LIKE &#39;%foo%&#39;</code></td>
</tr>
<tr>
<td>NOT LIKE</td>
<td></td>
<td><code>%</code> = wildcard case-insensitive</td>
<td><code>p2 NOT LIKE &#39;%foo%&#39;</code></td>
</tr>
<tr>
<td>IN</td>
<td></td>
<td>Works for values in a specified list of items</td>
<td><code>p0 IN (100, &#39;foo&#39;, true)</code></td>
</tr>
</tbody></table>

<aside class="notice">Note the spaces around the aliases in the queries.</aside>
<h3 id='operator-examples'>Operator Examples</h3>
<blockquote>
<p><strong>1)</strong> <code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data?api_key={YOUR_API_KEY}&amp;where=co2_emissions_g_km<200</code> <br/><strong>or</strong><br/><code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data?api_key={YOUR_API_KEY}&amp;where=co2_emissions_g_km lt 200</code><br/><br/><strong>2a)</strong> <code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data?api_key={YOUR_API_KEY}&amp;where=make IN (&quot;CHEVROLET&quot;,&quot;CADILLAC&quot;)</code><br/><br/>
<strong>2b)</strong>
<code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data?api_key={YOUR_API_KEY}&amp;where=make=&quot;CHEVROLET&quot; OR make=&quot;CADILLAC&quot;</code><br/><br/><strong>3)</strong> <code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data?api_key={YOUR_API_KEY}&amp;where=(make=&quot;CHEVROLET&quot; OR make=&quot;CADILLAC&quot;) AND (fuel_consumption_city_l_100km&lt;=12 AND fuel_consumption_hwy_l_100km&lt;=9)</code></p>
</blockquote>

<ol>
<li><p>List all vehicles with CO<sub>2</sub> emissions less than 200g/km</p></li>
<li><p>a) Get fuel consumption ratings for all Cadillac and Chevrolet vehicles</p>

<p>b) The same operation with boolean operators</p></li>
<li><p>List all Cadillac and Chevrolet vehicles with good city and highway mileage</p></li>
</ol>

<p><em>Example 3</em> is a more complex query with multiple conditions while explicitly specifying the evaluation order.</p>
<h2 id='geospatial-operators'>Geospatial Operators</h2>
<p>Data sets will commonly contain <code>latitude</code> and <code>longitude</code> as properties.</p>

<p>The <code>where</code> condition query parameter supports some geospatial functions for querying data sets.</p>
<h3 id='geospatial-operator-examples'>Geospatial Operator Examples</h3><pre class="highlight plaintext"><code>1) ...&amp;where=nearby(p3, 43.653226, -79.3831843, 10km)

2) ...&amp;where=bbox(p3, 43.5810245, -79.639219, 43.8554579, -79.11689699)
</code></pre>
<ol>
<li><p>Returns all rows in which the value in the specified column is within <code>radius</code> distance of the point specified by <code>latitude</code> and <code>longitude</code>. </p></li>
<li><p>Returns all rows in which the value in the specified column lies within the bounding box created by the two coordinates.</p></li>
</ol>
<h2 id='get-export'><div class="colour-pill"><span class="get">GET</span> Export</div></h2>
<p>Exporting is almost identical to the Data Query endpoint, with the difference being that the complete result of the query will be saved to a file, and that file will be served up.</p>
<h3 id='request'>Request</h3>
<blockquote>
<p>https://api.namara.io/v0/data_sets/{DATA_SET_ID}/data/export</p>
</blockquote>

<p>Export path and query parameters look a lot like the parameters for accessing the data set. Let&#39;s look at the requests you can make:</p>

<table><thead>
<tr>
<th>Path Parameters</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>data_set_id (required)</td>
<td><code>string</code></td>
<td>UUID for accessing the data set</td>
</tr>
</tbody></table>

<table><thead>
<tr>
<th>Query Parameters</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>geometry_format</td>
<td><code>string</code></td>
<td>Either <code>wkt</code> or <code>geojson</code> for all geometry values (default is <code>geojson</code>)</td>
</tr>
<tr>
<td>geojson_feature_key</td>
<td><code>string</code></td>
<td>Property name to use as geometry when rendering <code>geojson</code></td>
</tr>
<tr>
<td>limit</td>
<td><code>integer</code></td>
<td>Number of rows to export</td>
</tr>
<tr>
<td>offset</td>
<td><code>integer</code></td>
<td>Results will be returned starting at the row number specified (see <a href="#pagination">Pagination</a>)</td>
</tr>
<tr>
<td>select</td>
<td><code>string</code></td>
<td>Comma-separated list of column names to return</td>
</tr>
<tr>
<td>order</td>
<td><code>string</code></td>
<td>Specify the order of the returned results (see <a href="#ordering">Ordering</a>)</td>
</tr>
<tr>
<td>where</td>
<td><code>string</code></td>
<td>Conditions for performing query (see <a href="#conditions">Conditions</a>)</td>
</tr>
</tbody></table>
<h3 id='responses'>Responses</h3><pre class="highlight plaintext"><code>1)
  {
    "message": "Exported",
    "url": "&lt;url to file&gt;"
  }

2)
  { "message": "Pending" }

3)
  {
    "message": "Failed",
    "error_message": "&lt;reason for error&gt;"
  }
</code></pre>
<table><thead>
<tr>
<th>Response</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>200: OK</td>
<td>When the export has finished and redirect is not set (<em>example 1</em>)</td>
</tr>
<tr>
<td>202: Accepted</td>
<td>When the export has begun (<em>example 2</em>)</td>
</tr>
<tr>
<td>422: Unprocessable Entity</td>
<td>Failed to export (<em>example 3</em>)</td>
</tr>
</tbody></table>
<h2 id='get-aggregate'><div class="colour-pill"><span class="get">GET</span> Aggregate</div></h2>
<p>Use aggregation functions to retrieve data set-level information.</p>
<h3 id='request-2'>Request</h3>
<blockquote>
<p>https://api.namara.io/v0/data_sets/{DATA_SET_ID}/data/aggregation</p>
</blockquote>

<table><thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>data_set_id (required)</td>
<td><code>string</code></td>
<td>UUID for accessing the data set</td>
</tr>
<tr>
<td>operation (required)</td>
<td><code>string</code></td>
<td>Operation function to perform (see <a href="#operations">Operations</a>)</td>
</tr>
<tr>
<td>where</td>
<td><code>string</code></td>
<td>Conditions for performing query (see <a href="#conditions">Conditions</a>)</td>
</tr>
</tbody></table>
<h3 id='operations'>Operations</h3>
<table><thead>
<tr>
<th>Function</th>
<th>Description</th>
<th>Use</th>
</tr>
</thead><tbody>
<tr>
<td>count</td>
<td>The number of rows of data. Using <code>*</code> will count all rows - specifying a property will only count non-null rows for that property.</td>
<td><code>count(*)</code> <code>count(p0)</code></td>
</tr>
<tr>
<td>sum</td>
<td>The sum of all values in a column</td>
<td><code>sum(p0)</code></td>
</tr>
<tr>
<td>avg</td>
<td>The average of all values in a column</td>
<td><code>avg(p0)</code></td>
</tr>
<tr>
<td>min</td>
<td>The minimum value in a column</td>
<td><code>min(p0)</code></td>
</tr>
<tr>
<td>max</td>
<td>The maximum value in a column</td>
<td><code>max(p0)</code></td>
</tr>
</tbody></table>
<h3 id='operator-examples-2'>Operator Examples</h3>
<blockquote>
<p>1) <code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data/aggregation?api_key={YOUR_API_KEY}&amp;operation=avg(co2_emissions_g_km)&amp;where=make=&quot;CADILLAC&quot;</code></p>

<p>2) <code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data/aggregation?api_key={YOUR_API_KEY}&amp;operation=min(co2_emissions_g_km)&amp;where=make=&quot;CADILLAC&quot;</code></p>

<p>3) <code>https://api.namara.io/v0/data_sets/057d7914-839e-4625-b8f8-2aa109f11e5a/data/aggregation?api_key={YOUR_API_KEY}&amp;operation=count(*)&amp;where=make=&quot;CADILLAC&quot;</code></p>
</blockquote>

<ol>
<li><p>Reveals the average CO<sub>2</sub> emissions of Cadillac vehicles</p></li>
<li><p>Reveals the Cadillac vehicle with the least CO<sub>2</sub> emission</p></li>
<li><p>Reveals all the Cadillac vehicles</p></li>
</ol>
